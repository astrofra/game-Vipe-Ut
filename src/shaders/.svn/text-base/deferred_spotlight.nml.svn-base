<NML = 1.0>

<Shader =
	<Name = "core::projective_spotlight">

	<Input = <Id = "@gbuffer:0"> <Var = "nrm_dpth">>
	<Input = <Id = "@gbuffer:1"> <Var = "col_illum">>
	<Input = <Id = "@gbuffer:3"> <Var = "occ_diff">>

	<Vertex = "
		varying	vec3		forward;
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
			forward = (gl_ModelViewMatrix * gl_Vertex).xyz;
		}
	">

	<Pixel = "
		varying	vec3		forward;

		uniform	vec2		inverse_buffer_size;
		uniform	float		view_depth_offset;

		uniform mat4		light_projection_matrix;
		uniform vec3		diffuse_color;
		uniform vec3		specular_color;
		uniform vec3		position_view_space;
		uniform vec3		direction_view_space;
		uniform	float		range;
		uniform	float		spot_edge_angle;
		uniform	float		spot_cone_angle;

		uniform	sampler2D	nrm_dpth;
		uniform	sampler2D	col_illum;
		uniform	sampler2D	occ_diff;
		uniform	sampler2D	projection_texture;

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;
			vec4	dtsg = texture2D(nrm_dpth, UV);
			vec3	frag_viewpos = (forward / forward.z) * (dtsg.w + view_depth_offset);

			// Normal in viewmodel space.
			vec3	normal = vec3(dtsg.x, dtsg.y, dtsg.z);

			// Light diffuse contribution.
			vec3	dt = frag_viewpos - position_view_space;
			float	dl = length(dt);
			dt = dt / dl;
			float	atten = range > 0.0 ? max(1.0 - dl / range, 0.0) : 1.0;
			float	idiff = sqrt(max(-dot(dt, normal), 0.0)) * atten;

			// Projective map.
			vec4	pj_coord = light_projection_matrix * vec4(frag_viewpos, 1.0);
			if	(pj_coord.w < 0.5)
				discard;
			vec2	pj_biased = ((pj_coord.xy / pj_coord.w) + 1.0) * 0.5;

			// Clamp when outside of cone.
			float	sdiff = dot(direction_view_space, dt) < (spot_cone_angle - spot_edge_angle) ? 0.0 : 1.0;

			// Full contribution.
			vec4	pxl_col_illum = texture2D(col_illum, UV);
			vec4	pxl_occ_diff = texture2D(occ_diff, UV);
			gl_FragColor = vec4(texture2D(projection_texture, pj_biased).rgb /* pxl_occ_diff.rgb */* pxl_col_illum.rgb * diffuse_color * pxl_occ_diff.a * idiff * sdiff, 1.0);
		}
	">
>

<Shader =
	<Name = "core::projective_spotlight_shadow">

	<Input = <Id = "@gbuffer:0"> <Var = "nrm_dpth">>
	<Input = <Id = "@gbuffer:1"> <Var = "col_illum">>
	<Input = <Id = "@gbuffer:3"> <Var = "occ_diff">>

	<Vertex = "
		varying	vec3		forward;
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
			forward = (gl_ModelViewMatrix * gl_Vertex).xyz;
		}
	">

	<Pixel = "
		varying	vec3		forward;

		uniform	vec2		inverse_buffer_size;
		uniform	float		view_depth_offset;

		uniform mat4		light_projection_matrix;
		uniform vec3		diffuse_color;
		uniform	vec3		specular_color;
		uniform	vec3		position_view_space;
		uniform	float		range;
		uniform	float		spot_edge_angle;
		uniform	float		spot_cone_angle;

		uniform	sampler2D	nrm_dpth;
		uniform	sampler2D	col_illum;
		uniform	sampler2D	occ_diff;
		uniform	sampler2D	projection_texture;

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;
			vec4	dtsg = texture2D(nrm_dpth, UV);
			vec3	frag_viewpos = (forward / forward.z) * (dtsg.w + view_depth_offset);

			// Normal in viewmodel space.
			vec3	normal = vec3(dtsg.x, dtsg.y, dtsg.z);

			// Light diffuse contribution.
			vec3	dt = frag_viewpos - position_view_space;
			float	dl = length(dt);
			dt = dt / dl;
			float	atten = range > 0.0 ? max(1.0 - dl / range, 0.0) : 1.0;
			float	ishadow = pow(max(-dot(dt, normal), 0.0) * atten, 0.25);

			// Projective map.
			vec4	pj_coord = light_projection_matrix * vec4(frag_viewpos, 1.0);
			vec3	pj_biased = ((pj_coord.xyz / pj_coord.q) + 1.0) * 0.5;

			// Full contribution.
			gl_FragColor = texture2D(projection_texture, pj_biased.xy).rgba * ishadow;
		}
	">
>

<Shader =
	<Name = "core::spotlight">

	<Input = <Id = "@gbuffer:0"> <Var = "nrm_dpth">>
	<Input = <Id = "@gbuffer:1"> <Var = "col_illum">>
	<Input = <Id = "@gbuffer:3"> <Var = "occ_diff">>

	<Vertex = "
		varying	vec3		forward;
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
			forward = (gl_ModelViewMatrix * gl_Vertex).xyz;
		}
	">

	<Pixel = "
		varying	vec3		forward;

		uniform	vec2		inverse_buffer_size;
		uniform	float		view_depth_offset;

		uniform vec3		diffuse_color;
		uniform	vec3		specular_color;
		uniform	vec3		position_view_space;
		uniform	vec3		direction_view_space;

		uniform	float		range;
		uniform	float		spot_edge_angle;
		uniform	float		spot_cone_angle;

		uniform	sampler2D	nrm_dpth;
		uniform	sampler2D	col_illum;
		uniform	sampler2D	occ_diff;

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;
			vec4	dtsg = texture2D(nrm_dpth, UV);
			vec3	frag_viewpos = (forward / forward.z) * (dtsg.w + view_depth_offset);

			// Normal in viewmodel space.
			vec3	normal = vec3(dtsg.x, dtsg.y, dtsg.z);

			// Light diffuse contribution.
			vec3	dt = frag_viewpos - position_view_space;
			float	dl = length(dt);
			dt = dt / dl;
			float	atten = range > 0.0 ? max(1.0 - dl / range, 0.0) : 1.0;
			float	idiff = max(-dot(dt, normal) * atten, 0.0);

			float	sdiff = dot(direction_view_space, dt);
			if	(sdiff < spot_cone_angle)
			{
				if	(sdiff < 0.0)
					sdiff = 0.0;
				else
					sdiff = max((sdiff - spot_edge_angle) / (spot_cone_angle - spot_edge_angle), 0.0);
			}
			else	sdiff = 1.0;

			// Full contribution.
			vec4	pxl_col_illum = texture2D(col_illum, UV);
			vec4	pxl_occ_diff = texture2D(occ_diff, UV);
			gl_FragColor = vec4(/*pxl_occ_diff.rgb */ pxl_col_illum.rgb * diffuse_color * pxl_occ_diff.a * idiff * sdiff, 1.0);
		}
	">
>

<Shader =
	<Name = "core::spotlight_volumetric">

	<Input = <Id = "@gbuffer:0"> <Var = "nrm_dpth">>
	<Input = <Id = "@gbuffer:1"> <Var = "col_illum">>
	<Input = <Id = "@gbuffer:2"> <Var = "spec_gloss">>
	<Input = <Id = "@gbuffer:3"> <Var = "occ_diff">>

	<Vertex = "
		varying	vec3		forward;
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
			forward = (gl_ModelViewMatrix * gl_Vertex).xyz;
		}
	">

	<Pixel = "
		varying	vec3		forward;

		uniform	vec2		inverse_buffer_size;
		uniform	float		view_depth_offset;

		uniform vec3		diffuse_color,
							specular_color,
							position_view_space,
							direction_view_space;

		uniform	float		range,
							spot_edge_angle,
							spot_cone_angle,
							inverse_shadowmap_size,
							volumetric_step,
							volumetric_thickness;

		uniform	sampler2D	nrm_dpth,
							col_illum,
							spec_gloss,
							occ_diff;

		//------------
		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;
			vec4	dtsg = texture2D(nrm_dpth, UV);
			vec3	frag_viewpos = (forward / forward.z) * (dtsg.w + view_depth_offset);

			// Compute ray entry and exit points.
			vec3	direction_ray = normalize(frag_viewpos);
			float	fAdD = dot(direction_view_space, direction_ray),
					fCosSqr = spot_edge_angle * spot_edge_angle;

			vec3	kE = -position_view_space;

			float	fAdE = dot(direction_view_space, kE),
					fDdE = dot(direction_ray, kE),
					fEdE = dot(kE, kE);
			float	fC2 = fAdD * fAdD - fCosSqr,
					fC1 = fAdD * fAdE - fCosSqr * fDdE,
					fC0 = fAdE * fAdE - fCosSqr * fEdE;

			float	fDiscr = fC1 * fC1 - fC0 * fC2;
			if	(fDiscr <= 0.0)
				discard;

			float	fRoot = sqrt(fDiscr),
					fInvC2 = 1.0 / fC2;
			float	fT0 = (-fC1 + fRoot) * fInvC2,
					fT1 = fC2 < 0.0 ? (-fC1 - fRoot) * fInvC2 : 2000.0;

			vec3	entry_point = fT0 * direction_ray;

			if	(dot(position_view_space - entry_point, direction_view_space) > 0.0)
				discard;

			// Sample volume.
			float   thickness = (min(length(frag_viewpos), fT1) - fT0) / volumetric_thickness;

			// Normal in viewmodel space.
			vec3	normal = vec3(dtsg.x, dtsg.y, dtsg.z);

			// Light diffuse contribution.
			vec3	dt = frag_viewpos - position_view_space;
			float	dl = length(dt);
			dt = dt / dl;
			float	atten = range > 0.0 ? max(1.0 - dl / range, 0.0) : 1.0;
			float	idiff = max(-dot(dt, normal) * atten, 0.0);

			float	sdiff = dot(direction_view_space, dt);
			if	(sdiff < spot_cone_angle)
					sdiff = (sdiff < 0.0) ? 0.0 : max((sdiff - spot_edge_angle) / (spot_cone_angle - spot_edge_angle), 0.0);
			else	sdiff = 1.0;

			// Light specular contribution.
			vec4	pxl_spec_gloss = texture2D(spec_gloss, UV);
			vec3	e = reflect(normalize(frag_viewpos), normal);

			float	spec_atten = min((atten + 9.0) / 10.0, 1.0);
			float	ispec = pow(max(-dot(dt, normalize(e)) * spec_atten * sdiff, 0.0), pxl_spec_gloss.a * 96.0);

			// Full contribution.
			vec4	pxl_col_illum = texture2D(col_illum, UV);
			vec4	pxl_occ_diff = texture2D(occ_diff, UV);
			gl_FragColor =
					vec4(pxl_col_illum.rgb * diffuse_color * pxl_occ_diff.a * idiff * sdiff + pxl_spec_gloss.rgb * specular_color * ispec, 1.0)
				+	vec4(diffuse_color.rgb * thickness, 1.0);
		}
	">
>

<Shader =
	<Name = "core::spotlight_volumetric_shadowmap">

	<Input = <Id = "#texture:noise.tga, 1"> <Var = "noise_texture">>

	<Input = <Id = "@gbuffer:0"> <Var = "nrm_dpth">>
	<Input = <Id = "@gbuffer:1"> <Var = "col_illum">>
	<Input = <Id = "@gbuffer:2"> <Var = "spec_gloss">>
	<Input = <Id = "@gbuffer:3"> <Var = "occ_diff">>

	<Input = <Id = "@inverse_shadowmap_size"> <Var = "inverse_shadowmap_size">>

	<Vertex = "
		varying	vec3		forward;
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
			forward = (gl_ModelViewMatrix * gl_Vertex).xyz;
		}
	">

	<Pixel = "
		varying	vec3		forward;

		uniform	vec2		inverse_buffer_size;
		uniform	float		view_depth_offset,
							shadow_bias;

		uniform vec3		diffuse_color,
							specular_color,
							position_view_space,
							direction_view_space;

		uniform	float		range,
							spot_edge_angle,
							spot_cone_angle,
							inverse_shadowmap_size,
							volumetric_step,
							volumetric_thickness;

		uniform	sampler2D	nrm_dpth,
							col_illum,
							spec_gloss,
							occ_diff,
							light_view_depth_texture,
							noise_texture;

		uniform	mat4		view_to_light_matrix;
		uniform	mat4		light_projection_matrix;

		//---------------------------------------------
		float	ShadowTest(float light_z, float frag_z)
		{	return step(frag_z, light_z);	}

		//----------------------------------------------------------------------
		float	EvaluateFastPCF(mat4 light_projection_matrix, vec3 frag_viewpos)
		{
			vec4	frag_lightpos = light_projection_matrix * vec4(frag_viewpos, 1.0);
			vec2	pj_biased = ((frag_lightpos.xy / frag_lightpos.w) + 1.0) * 0.5;
			return ShadowTest(texture2D(light_view_depth_texture, pj_biased).r, frag_lightpos.z);
		}

		//------------------------------------------------------------------
		float	EvaluatePCF(mat4 light_projection_matrix, vec3 frag_viewpos)
		{
			vec4	frag_lightpos = light_projection_matrix * vec4(frag_viewpos, 1.0);
			vec2	pj_biased = ((frag_lightpos.xy / frag_lightpos.w) + 1.0) * 0.5;

			return	(	ShadowTest(texture2D(light_view_depth_texture, pj_biased).r, frag_lightpos.z) +
						ShadowTest(texture2D(light_view_depth_texture, pj_biased + vec2(0.5, 0.0) * 4.0 * inverse_shadowmap_size).r, frag_lightpos.z) +
						ShadowTest(texture2D(light_view_depth_texture, pj_biased + vec2(0.0, 0.5) * 4.0 * inverse_shadowmap_size).r, frag_lightpos.z) +
						ShadowTest(texture2D(light_view_depth_texture, pj_biased + vec2(0.5, 0.5) * 4.0 * inverse_shadowmap_size).r, frag_lightpos.z)
					) * 0.25;
		}

		//------------
		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;
			vec4	dtsg = texture2D(nrm_dpth, UV);
			vec3	frag_viewpos = (forward / forward.z) * (dtsg.w + view_depth_offset - shadow_bias);

			// Compute ray entry and exit points.
			vec3	direction_ray = normalize(frag_viewpos);
			float	fAdD = dot(direction_view_space, direction_ray),
					fCosSqr = spot_edge_angle * spot_edge_angle;
			
			vec3	kE = -position_view_space;

			float	fAdE = dot(direction_view_space, kE),
					fDdE = dot(direction_ray, kE),
					fEdE = dot(kE, kE);
			float	fC2 = fAdD * fAdD - fCosSqr,
					fC1 = fAdD * fAdE - fCosSqr * fDdE,
					fC0 = fAdE * fAdE - fCosSqr * fEdE;
			
			float	fDiscr = fC1 * fC1 - fC0 * fC2;
			if	(fDiscr < 0.0)
				discard;
	
			float	fRoot = sqrt(fDiscr),
					fInvC2 = 1.0 / fC2;
			float	fT0 = (-fC1 + fRoot) * fInvC2,
					fT1 = (-fC1 - fRoot) * fInvC2;

			// Trace correct cone.
			float	k0 = dot(position_view_space - fT0 * direction_ray, direction_view_space),
					k1 = dot(position_view_space - fT1 * direction_ray, direction_view_space);
			if	((k0 > 0.0) && (k1 > 0.0))
				discard;

			if	(fC2 > 0.0)
			{
				if	(k0 > 0.0)
					fT0 = 0.0;
				if	(k1 > 0.0)
					fT1 = 64000.0;
			}

			// Cap cone at range.
			if	(range > 0.0)
			{
				float	t = dot(position_view_space + direction_view_space * range, direction_view_space) / fAdD;

				// Which side of the plane is view on.
				if	(fAdD >= 0.0)	// Cone origin side.
					fT1 = min(t, fT1);
				else				// Outside cone space.
					fT0 = max(t, fT0);
			}

			// Sample volume.
			fT0 = max(0.0, fT0);

			vec3	sample = direction_ray * fT0;
			float	sample_length = 0.0,
					frag_length = length(frag_viewpos),
					max_length = min(frag_length, fT1) - fT0;
			vec3	sample_step = direction_ray * volumetric_step;

			float	thickness = 0.0,
					contribution = volumetric_step / volumetric_thickness;

			float	max_step = 0.0;
			while	(sample_length < max_length)
			{
				sample += sample_step;
				sample_length += volumetric_step;
				thickness += contribution * EvaluateFastPCF(light_projection_matrix, sample);

				max_step += 1.0;
				if	(max_step > 1000.0)
				{
					gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
					return;
				}
			}

			// Adjust sample length to exact intersection.
			thickness -= (sample_length - max_length) / volumetric_thickness;

			// Spot.
			float	pcf = EvaluatePCF(light_projection_matrix, frag_viewpos);

			if	(pcf > 0.0)
			{
				// Normal in viewmodel space.
				vec3	normal = vec3(dtsg.x, dtsg.y, dtsg.z);

				// Light diffuse contribution.
				vec3	dt = frag_viewpos - position_view_space;
				float	dl = length(dt);
				dt = dt / dl;
				float	atten = range > 0.0 ? max(1.0 - dl / range, 0.0) : 1.0;
				float	idiff = max(-dot(dt, normal) * atten, 0.0);

				float	sdiff = dot(direction_view_space, dt);
				if	(sdiff < spot_cone_angle)
				{
					if	(sdiff < 0.0)
						sdiff = 0.0;
					else
						sdiff = max((sdiff - spot_edge_angle) / (spot_cone_angle - spot_edge_angle), 0.0);
				}
				else	sdiff = 1.0;

				// Light specular contribution.
				vec4	pxl_spec_gloss = texture2D(spec_gloss, UV);
				vec3	e = reflect(normalize(frag_viewpos), normal);

				float	spec_atten = min((atten + 9.0) / 10.0, 1.0);
				float	ispec = pow(max(-dot(dt, normalize(e)) * spec_atten * sdiff, 0.0), pxl_spec_gloss.a * 96.0);

				// Full contribution.
				vec4	pxl_col_illum = texture2D(col_illum, UV);
				vec4	pxl_occ_diff = texture2D(occ_diff, UV);
				gl_FragColor =
						vec4(pxl_col_illum.rgb * diffuse_color * pxl_occ_diff.a * idiff * sdiff + pxl_spec_gloss.rgb * specular_color * ispec, 1.0) * pcf
					+	vec4(diffuse_color.rgb * thickness, 1.0);
			}
			else	gl_FragColor = vec4(diffuse_color.rgb * thickness, 1.0);
		}
	">
>

<Shader =
	<Name = "core::spotlight_shadowmap">

	<Input = <Id = "#texture:noise.tga, 1"> <Var = "noise_texture">>

	<Input = <Id = "@gbuffer:0"> <Var = "nrm_dpth">>
	<Input = <Id = "@gbuffer:1"> <Var = "col_illum">>
	<Input = <Id = "@gbuffer:2"> <Var = "spec_gloss">>
	<Input = <Id = "@gbuffer:3"> <Var = "occ_diff">>

	<Input = <Id = "@inverse_shadowmap_size"> <Var = "inverse_shadowmap_size">>

	<Vertex = "
		varying	vec3		forward;
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
			forward = (gl_ModelViewMatrix * gl_Vertex).xyz;
		}
	">

	<Pixel = "
		varying	vec3		forward;

		uniform	vec2		inverse_buffer_size;
		uniform	float		view_depth_offset,
							shadow_bias;

		uniform vec3		diffuse_color,
							specular_color,
							position_view_space,
							direction_view_space;

		uniform	float		range,
							spot_edge_angle,
							spot_cone_angle,
							inverse_shadowmap_size;

		uniform	sampler2D	nrm_dpth,
							col_illum,
							spec_gloss,
							occ_diff,
							light_view_depth_texture,
							noise_texture;

		uniform	mat4		view_to_light_matrix;
		uniform	mat4		light_projection_matrix;

		//---------------------------------------------
		float	ShadowTest(float light_z, float frag_z)
		{	return step(frag_z, light_z);	}

		//------------------------------------------------------------------
		float	EvaluatePCF(mat4 light_projection_matrix, vec3 frag_viewpos)
		{
			vec4	frag_lightpos = light_projection_matrix * vec4(frag_viewpos, 1.0);
			vec2	pj_biased = ((frag_lightpos.xy / frag_lightpos.w) + 1.0) * 0.5;

			return	(	ShadowTest(texture2D(light_view_depth_texture, pj_biased).r, frag_lightpos.z) +
						ShadowTest(texture2D(light_view_depth_texture, pj_biased + vec2(0.5, 0.0) * 4.0 * inverse_shadowmap_size).r, frag_lightpos.z) +
						ShadowTest(texture2D(light_view_depth_texture, pj_biased + vec2(0.0, 0.5) * 4.0 * inverse_shadowmap_size).r, frag_lightpos.z) +
						ShadowTest(texture2D(light_view_depth_texture, pj_biased + vec2(0.5, 0.5) * 4.0 * inverse_shadowmap_size).r, frag_lightpos.z)
					) * 0.25;
		}

		//------------
		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;
			vec4	dtsg = texture2D(nrm_dpth, UV);
			vec3	frag_viewpos = (forward / forward.z) * (dtsg.w + view_depth_offset - shadow_bias);

			float	pcf = EvaluatePCF(light_projection_matrix, frag_viewpos);

			if	(pcf > 0.0)
			{
				// Normal in viewmodel space.
				vec3	normal = vec3(dtsg.x, dtsg.y, dtsg.z);

				// Light diffuse contribution.
				vec3	dt = frag_viewpos - position_view_space;
				float	dl = length(dt);
				dt = dt / dl;
				float	atten = range > 0.0 ? max(1.0 - dl / range, 0.0) : 1.0;
				float	idiff = max(-dot(dt, normal) * atten, 0.0);

				float	sdiff = dot(direction_view_space, dt);
				if	(sdiff < spot_cone_angle)
				{
					if	(sdiff < 0.0)
						sdiff = 0.0;
					else
						sdiff = max((sdiff - spot_edge_angle) / (spot_cone_angle - spot_edge_angle), 0.0);
				}
				else	sdiff = 1.0;

				// Light specular contribution.
				vec4	pxl_spec_gloss = texture2D(spec_gloss, UV);
				vec3	e = reflect(normalize(frag_viewpos), normal);

				float	spec_atten = min((atten + 9.0) / 10.0, 1.0);
				float	ispec = pow(max(-dot(dt, normalize(e)) * spec_atten * sdiff, 0.0), pxl_spec_gloss.a * 96.0);

				// Full contribution.
				vec4	pxl_col_illum = texture2D(col_illum, UV);
				vec4	pxl_occ_diff = texture2D(occ_diff, UV);
				gl_FragColor = vec4(pxl_col_illum.rgb * diffuse_color * pxl_occ_diff.a * idiff * sdiff + pxl_spec_gloss.rgb * specular_color * ispec, 1.0) * pcf;
			}
			else	gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);
		}
	">
>


<Shader =
	<Name = "core::projective_spotlight_shadowmap">

	<Input = <Id = "#texture:noise.tga, 1"> <Var = "noise_texture">>

	<Input = <Id = "@gbuffer:0"> <Var = "nrm_dpth">>
	<Input = <Id = "@gbuffer:1"> <Var = "col_illum">>
	<Input = <Id = "@gbuffer:2"> <Var = "spec_gloss">>
	<Input = <Id = "@gbuffer:3"> <Var = "occ_diff">>

	<Input = <Id = "@inverse_shadowmap_size"> <Var = "inverse_shadowmap_size">>

	<Vertex = "
		varying	vec3		forward;
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
			forward = (gl_ModelViewMatrix * gl_Vertex).xyz;
		}
	">
	<Pixel = "
		varying	vec3		forward;

		uniform	vec2		inverse_buffer_size;
		uniform	float		view_depth_offset,
							shadow_bias;

		uniform vec3		diffuse_color,
							specular_color,
							position_view_space,
							direction_view_space;

		uniform	float		range,
							spot_edge_angle,
							spot_cone_angle,
							inverse_shadowmap_size;

		uniform	sampler2D	nrm_dpth,
							col_illum,
							spec_gloss,
							occ_diff,
							light_view_depth_texture,
							noise_texture,
							projection_texture;

		uniform	mat4		view_to_light_matrix,
							light_projection_matrix;

		//---------------------------------------------
		float	ShadowTest(float light_z, float frag_z)
		{	return step(frag_z, light_z);	}

		//-----------------------------------------------------------------------------------
		float	EvaluatePCF(mat4 light_projection_matrix, vec2 pj_biased, vec4 frag_lightpos)
		{
			return	(	ShadowTest(texture2D(light_view_depth_texture, pj_biased).r, frag_lightpos.z) +
						ShadowTest(texture2D(light_view_depth_texture, pj_biased + vec2(0.5, 0.0) * 4.0 * inverse_shadowmap_size).r, frag_lightpos.z) +
						ShadowTest(texture2D(light_view_depth_texture, pj_biased + vec2(0.0, 0.5) * 4.0 * inverse_shadowmap_size).r, frag_lightpos.z) +
						ShadowTest(texture2D(light_view_depth_texture, pj_biased + vec2(0.5, 0.5) * 4.0 * inverse_shadowmap_size).r, frag_lightpos.z)
					) * 0.25;
		}

		//------------
		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;
			vec4	dtsg = texture2D(nrm_dpth, UV);

			// Unpack depth and compute fragment position in view space.
			vec3	frag_viewpos = (forward / forward.z) * (dtsg.w + view_depth_offset - shadow_bias);
			vec4	frag_lightpos = light_projection_matrix * vec4(frag_viewpos, 1.0);
			vec2	pj_biased = ((frag_lightpos.xy / frag_lightpos.w) + 1.0) * 0.5;

			float	pcf = EvaluatePCF(light_projection_matrix, pj_biased, frag_lightpos);

			if	(pcf > 0.0)
			{
				// Normal in viewmodel space.
				vec3	normal = vec3(dtsg.x, dtsg.y, dtsg.z);

				// Light diffuse contribution.
				vec3	dt = frag_viewpos - position_view_space;
				float	dl = length(dt);
				dt = dt / dl;
				float	atten = range > 0.0 ? max(1.0 - dl / range, 0.0) : 1.0;
				float	idiff = sqrt(max(-dot(dt, normal), 0.0)) * atten;

				// Clamp when outside of cone.
				float	sdiff = dot(direction_view_space, dt) < (spot_cone_angle - spot_edge_angle) ? 0.0 : 1.0;

				// Full contribution.
				vec4	pxl_col_illum = texture2D(col_illum, UV);
				vec4	pxl_occ_diff = texture2D(occ_diff, UV);
				gl_FragColor = vec4(texture2D(projection_texture, pj_biased).rgb /* pxl_occ_diff.rgb */* pxl_col_illum.rgb * diffuse_color * pxl_occ_diff.a * idiff * sdiff, 1.0) * pcf;
			}
			else	gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);
		}
	">
>

<Shader =
	<Name = "core::spotlight_specular">

	<Input = <Id = "@gbuffer:0"> <Var = "nrm_dpth">>
	<Input = <Id = "@gbuffer:1"> <Var = "col_illum">>
	<Input = <Id = "@gbuffer:2"> <Var = "spec_gloss">>
	<Input = <Id = "@gbuffer:3"> <Var = "occ_diff">>

	<Vertex = "
		varying	vec3		forward;
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
			forward = (gl_ModelViewMatrix * gl_Vertex).xyz;
		}
	">
	<Pixel = "
		varying	vec3		forward;

		uniform	vec2		inverse_buffer_size;
		uniform	float		view_depth_offset;

		uniform vec3		diffuse_color;
		uniform vec3		specular_color;
		uniform vec3		position_view_space;
		uniform vec3		direction_view_space;
		uniform	float		range;
		uniform	float		spot_edge_angle;
		uniform	float		spot_cone_angle;

		uniform	sampler2D	nrm_dpth;
		uniform	sampler2D	col_illum;
		uniform sampler2D	spec_gloss;
		uniform	sampler2D	occ_diff;

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;
			vec4	dtsg = texture2D(nrm_dpth, UV);

			// Fragment to view space.
 			vec3	fragment_position = (forward / forward.z) * (dtsg.w + view_depth_offset);

			// Normal in viewmodel space.
			vec3	normal = vec3(dtsg.x, dtsg.y, dtsg.z);

			// Light diffuse contribution.
			vec3	dt = fragment_position - position_view_space;
			float	dl = length(dt);
			dt = dt / dl;
			float	atten = range > 0.0 ? max(1.0 - dl / range, 0.0) : 1.0;
			float	idiff = max(-dot(dt, normal) * atten, 0.0);

			float	sdiff = dot(direction_view_space, dt);
			if	(sdiff < spot_cone_angle)
					sdiff = sdiff < 0.0 ? 0.0 : max((sdiff - spot_edge_angle) / (spot_cone_angle - spot_edge_angle), 0.0);
			else	sdiff = 1.0;

			// Light specular contribution.
			vec4	pxl_spec_gloss = texture2D(spec_gloss, UV);
			vec3	e = reflect(normalize(fragment_position), normal);
			float	spec_atten = min((atten + 9.0) / 10.0, 1.0);
			float	ispec = pow(max(-dot(dt, normalize(e)) * spec_atten * sdiff, 0.0), pxl_spec_gloss.a * 96.0);

			// Full contribution.
			vec4	pxl_col_illum = texture2D(col_illum, UV);
			vec4	pxl_occ_diff = texture2D(occ_diff, UV);
			gl_FragColor = vec4(/*pxl_occ_diff.rgb */ pxl_col_illum.rgb * diffuse_color * pxl_occ_diff.a * idiff * sdiff + pxl_spec_gloss.rgb * specular_color * ispec, 1.0);
		}
	">
>
