<NML = 1.0>

<Shader =
	<Name = "core::linearlight">

	<Input = <Id = "@gbuffer:0"> <Var = "nrm_dpth">>
	<Input = <Id = "@gbuffer:1"> <Var = "col_illum">>
	<Input = <Id = "@gbuffer:2"> <Var = "spec_gloss">>
	<Input = <Id = "@gbuffer:3"> <Var = "occ_diff">>

	<Vertex = "
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
		}
	">

	<Pixel = "
		uniform	vec2		inverse_buffer_size;
		uniform	vec2		inverse_projection_2d;
		uniform	vec2		display_buffer_ratio;
		uniform	float		view_depth_offset;

		uniform vec3		diffuse_color;
		uniform	vec3		specular_color;
		uniform	vec3		direction_view_space;

		uniform	sampler2D	nrm_dpth;
		uniform	sampler2D	col_illum;
		uniform	sampler2D	spec_gloss;
		uniform	sampler2D	occ_diff;

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;
			vec4	dtsg = texture2D(nrm_dpth, UV);

			// Unpack depth and compute fragment position in view space.
			vec3	svc = vec3((((UV * display_buffer_ratio) - vec2(0.5, 0.5)) * 2.0) * inverse_projection_2d, 1.0);
			vec3	frag_viewpos = svc * (dtsg.w + view_depth_offset);

			// Normal in viewmodel space.
			vec3	normal = vec3(dtsg.x, dtsg.y, dtsg.z);

			// Light diffuse contribution.
			float	idiff = max(-dot(direction_view_space, normal), 0.0);

			// Light specular contribution.
			vec4	pxl_spec_gloss = texture2D(spec_gloss, UV);
			vec3	e = reflect(normalize(frag_viewpos), normal);
			float	ispec = pow(max(-dot(direction_view_space, normalize(e)), 0.0), pxl_spec_gloss.a * 96.0);

			// Full contribution.
			vec4	pxl_col_illum = texture2D(col_illum, UV);
			vec4	pxl_occ_diff = texture2D(occ_diff, UV);
			gl_FragColor = vec4(pxl_occ_diff.rgb * (pxl_col_illum.rgb * diffuse_color * pxl_occ_diff.a * idiff + pxl_spec_gloss.rgb * specular_color * ispec), 1.0);
		}
	">
>

<Shader =
	<Name = "core::linearlight_pssm">

	<Input = <Id = "#texture:noise.tga, 1"> <Var = "noise_texture">>
	<Input = <Id = "@gbuffer:0"> <Var = "nrm_dpth">>
	<Input = <Id = "@gbuffer:1"> <Var = "col_illum">>
	<Input = <Id = "@gbuffer:2"> <Var = "spec_gloss">>
	<Input = <Id = "@gbuffer:3"> <Var = "occ_diff">>
	<Input = <Id = "@inverse_shadowmap_size"> <Var = "inverse_shadowmap_size">>

	<Vertex = "
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
		}
	">

	<Pixel = "
		varying	vec4		forward;

		uniform	vec2		inverse_buffer_size;
		uniform	vec2		inverse_projection_2d;
		uniform	vec2		display_buffer_ratio;
		uniform	float		view_depth_offset,
							shadow_bias;

		uniform vec3		diffuse_color;
		uniform	vec3		specular_color;
		uniform	vec3		direction_view_space;

		uniform	sampler2D	nrm_dpth;
		uniform	sampler2D	col_illum;
		uniform	sampler2D	spec_gloss;
		uniform	sampler2D	occ_diff;
		uniform	sampler2D	noise_texture;

		uniform	sampler2D	pssm;
		uniform	mat4		pssm_0_projection_matrix;
		uniform	float		pssm_0_slice_distance;
		uniform	mat4		pssm_1_projection_matrix;
		uniform	float		pssm_1_slice_distance;
		uniform	mat4		pssm_2_projection_matrix;
		uniform	float		pssm_2_slice_distance;
		uniform	mat4		pssm_3_projection_matrix;
		uniform	float		pssm_3_slice_distance;
		uniform float		inverse_shadowmap_size;

		//---------------------------------------------
		float	ShadowTest(float light_z, float frag_z)
		{	return step(frag_z, light_z);	}

		//-------------------------------------------------------------------
		float	EvaluatePCF0(mat4 light_projection_matrix, vec3 frag_viewpos)
		{
			vec4	frag_lightpos = light_projection_matrix * vec4(frag_viewpos, 1.0);
			vec2	pj_biased = ((frag_lightpos.xy / frag_lightpos.w) + 1.0) * 0.5;

			return	(	ShadowTest(texture2D(pssm, pj_biased).r, frag_lightpos.z) +
						ShadowTest(texture2D(pssm, pj_biased + vec2(0.5, 0.0) * 4.0 * inverse_shadowmap_size).r, frag_lightpos.z) +
						ShadowTest(texture2D(pssm, pj_biased + vec2(0.0, 0.5) * 4.0 * inverse_shadowmap_size).r, frag_lightpos.z) +
						ShadowTest(texture2D(pssm, pj_biased + vec2(0.5, 0.5) * 4.0 * inverse_shadowmap_size).r, frag_lightpos.z)
					) * 0.25;
		}

		//-------------------------------------------------------------------
		float	EvaluatePCF1(mat4 light_projection_matrix, vec3 frag_viewpos)
		{
			vec4	frag_lightpos = light_projection_matrix * vec4(frag_viewpos, 1.0);
			vec2	pj_biased = ((frag_lightpos.xy / frag_lightpos.w) + 1.0) * 0.5;

			return	(	ShadowTest(texture2D(pssm, pj_biased).g, frag_lightpos.z) +
						ShadowTest(texture2D(pssm, pj_biased + vec2(0.5, 0.0) * 4.0 * inverse_shadowmap_size).g, frag_lightpos.z) +
						ShadowTest(texture2D(pssm, pj_biased + vec2(0.0, 0.5) * 4.0 * inverse_shadowmap_size).g, frag_lightpos.z) +
						ShadowTest(texture2D(pssm, pj_biased + vec2(0.5, 0.5) * 4.0 * inverse_shadowmap_size).g, frag_lightpos.z)
					) * 0.25;
		}

		//-------------------------------------------------------------------
		float	EvaluatePCF2(mat4 light_projection_matrix, vec3 frag_viewpos)
		{
			vec4	frag_lightpos = light_projection_matrix * vec4(frag_viewpos, 1.0);
			vec2	pj_biased = ((frag_lightpos.xy / frag_lightpos.w) + 1.0) * 0.5;

			return	(	ShadowTest(texture2D(pssm, pj_biased).b, frag_lightpos.z) +
						ShadowTest(texture2D(pssm, pj_biased + vec2(0.5, 0.0) * 4.0 * inverse_shadowmap_size).b, frag_lightpos.z) +
						ShadowTest(texture2D(pssm, pj_biased + vec2(0.0, 0.5) * 4.0 * inverse_shadowmap_size).b, frag_lightpos.z) +
						ShadowTest(texture2D(pssm, pj_biased + vec2(0.5, 0.5) * 4.0 * inverse_shadowmap_size).b, frag_lightpos.z)
					) * 0.25;
		}

		//-------------------------------------------------------------------
		float	EvaluatePCF3(mat4 light_projection_matrix, vec3 frag_viewpos)
		{
			vec4	frag_lightpos = light_projection_matrix * vec4(frag_viewpos, 1.0);
			vec2	pj_biased = ((frag_lightpos.xy / frag_lightpos.w) + 1.0) * 0.5;

			return	(	ShadowTest(texture2D(pssm, pj_biased).a, frag_lightpos.z) +
						ShadowTest(texture2D(pssm, pj_biased + vec2(0.5, 0.0) * 4.0 * inverse_shadowmap_size).a, frag_lightpos.z) +
						ShadowTest(texture2D(pssm, pj_biased + vec2(0.0, 0.5) * 4.0 * inverse_shadowmap_size).a, frag_lightpos.z) +
						ShadowTest(texture2D(pssm, pj_biased + vec2(0.5, 0.5) * 4.0 * inverse_shadowmap_size).a, frag_lightpos.z)
					) * 0.25;
		}

		//------------
		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;
			vec4	dtsg = texture2D(nrm_dpth, UV);

			// Unpack depth and compute fragment position in view space.
			vec3	svc = vec3((((UV * display_buffer_ratio) - vec2(0.5, 0.5)) * 2.0) * inverse_projection_2d, 1.0);
			vec3	frag_viewpos = svc * (dtsg.w + view_depth_offset - shadow_bias);

			// Evaluate PCF on the shadow map corresponding to this fragment slice.
			float	pcf = 1.0;

					if	(frag_viewpos.z < pssm_0_slice_distance)
						pcf = EvaluatePCF0(pssm_0_projection_matrix, frag_viewpos);

			else	if	(frag_viewpos.z < pssm_1_slice_distance)
						pcf = EvaluatePCF1(pssm_1_projection_matrix, frag_viewpos);

			else	if	(frag_viewpos.z < pssm_2_slice_distance)
						pcf = EvaluatePCF2(pssm_2_projection_matrix, frag_viewpos);

			else	if	(frag_viewpos.z < pssm_3_slice_distance)
			{
				pcf = EvaluatePCF3(pssm_3_projection_matrix, frag_viewpos);
				float	ramp_k = clamp((frag_viewpos.z - (pssm_3_slice_distance - 10.0)) / 10.0, 0.0, 1.0);
				pcf = pcf * (1.0 - ramp_k) + ramp_k;
			}

			if	(pcf > 0.0)
			{
				frag_viewpos = svc * (dtsg.w + view_depth_offset);

				// Normal in viewmodel space.
				vec3	normal = vec3(dtsg.x, dtsg.y, dtsg.z);

				// Light diffuse contribution.
				float	idiff = max(-dot(direction_view_space, normal), 0.0);

				// Light specular contribution.
				vec4	pxl_spec_gloss = texture2D(spec_gloss, UV);
				vec3	e = reflect(normalize(frag_viewpos), normal);
				float	ispec = pow(max(-dot(direction_view_space, normalize(e)), 0.0), pxl_spec_gloss.a * 96.0);

				// Full contribution.
				vec4	pxl_col_illum = texture2D(col_illum, UV);
				vec4	pxl_occ_diff = texture2D(occ_diff, UV);
				gl_FragColor = vec4(pxl_occ_diff.rgb * (pxl_col_illum.rgb * diffuse_color * pxl_occ_diff.a * idiff + pxl_spec_gloss.rgb * specular_color * ispec), 1.0) * pcf;
			}
			else	gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);
		}
	">
>
